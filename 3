#include <iostream>
#include <vector>

using namespace std;

struct VertexInfo{
    int discovered;
    int completed;
    int state; //0-white, 1-grey, 2-black
    vector<int> adj;
    VertexInfo( ) :
        discovered( 0 ),
        completed( 0 ),
        state( 0 ),
        adj( )
    { }
}

int noComponents = 0;

void Visit( vector<VertexInfo> graph, int i ) {
    time++;
    graph[i].discovered = time;
    graph[i].state = 1;
    for( int j = 0; j < graph[i].adj.size( ); j++ ) {
        if( graph[graph[i].adj[j]].state == 0 ) {
            Visit( graph, graph[i].adj[j] );
    }
    time++;
    graph[i].completed = time;
    graph[i].state = 2;
}

void DFS( vector<VertexInfo> graph ) {
    time = 0;
    for( int i = 0; i < n; i++ ) {
        if( graph[i].state == 0 ) {
            Visit( graph, i );
            noComponents++;
        }
    }
}

int main( )
{
    ios::sync_with_stdio( false );
    int n, m;
    cin >> n;
    cin >> m;
    vector<vector<int>> graph( n + m );
    for( int i = 0; i < n; i++ ) {
        int noLang;
        cin >> noLang;
        for( int j = 0; j < noLang; j++ ) {
            int lang;
            cin >> lang;
            graph[i].push_back( lang );
            graph[n + lang - 1].push_back( i );
        }
    }
    DFS( graph );
    cout << noComponents - 1 << endl;
}
